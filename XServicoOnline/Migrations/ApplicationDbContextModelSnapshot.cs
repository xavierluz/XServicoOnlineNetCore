// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using XServicoOnline.Data;

namespace XServicoOnline.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:dbo.SEQ_GENERATED_FUNCAO_REIVINDICAO_ID", "'SEQ_GENERATED_FUNCAO_REIVINDICAO_ID', 'dbo', '100', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:dbo.SEQ_GENERATED_USUARIO_REIVINDICAO_ID", "'SEQ_GENERATED_USUARIO_REIVINDICAO_ID', 'dbo', '100', '1', '', '', 'Int64', 'False'");

            modelBuilder.Entity("XServicoOnline.Models.Funcao", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("CodigoConcorrencia");

                    b.Property<string>("Name")
                        .HasColumnName("Nome")
                        .HasMaxLength(300);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("NomeNormalizado")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Funcao");
                });

            modelBuilder.Entity("XServicoOnline.Models.FuncaoReivindicacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("TipoReivindicacao")
                        .HasMaxLength(100);

                    b.Property<string>("ClaimValue")
                        .HasColumnName("ValorReivindicacao")
                        .HasMaxLength(200);

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnName("FuncaoId")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("FuncaoReivindicacao");
                });

            modelBuilder.Entity("XServicoOnline.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("QuantidadeAcessoFalho");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("CodigoConcorrencia");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasMaxLength(100);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("Bloqueado");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("DataDesbloqueio");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("EmailNormalizado")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("NomeNormalizado")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("HashSenha");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("Telefone");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("TelefoneConfirmado");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("CodigoSeguranca");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("DoisTipoAcesso");

                    b.Property<string>("UserName")
                        .HasColumnName("Nome")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("IDX_USUARIO_EMAIL");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("IDX_USUARIO_NOME");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("XServicoOnline.Models.UsuarioFuncao", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("UsuarioId")
                        .HasMaxLength(100);

                    b.Property<string>("RoleId")
                        .HasColumnName("FuncaoId")
                        .HasMaxLength(100);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsuarioFuncao");
                });

            modelBuilder.Entity("XServicoOnline.Models.UsuarioLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("ProvedorLogin")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnName("ChaveProvedor")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("NomeProvedor")
                        .HasMaxLength(100);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("UsuarioId")
                        .HasMaxLength(100);

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UsuarioLogin");
                });

            modelBuilder.Entity("XServicoOnline.Models.UsuarioReivindicacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("TipoReivindicacao")
                        .HasMaxLength(100);

                    b.Property<string>("ClaimValue")
                        .HasColumnName("ValorReivindicacao")
                        .HasMaxLength(200);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsuarioReivindicacao");
                });

            modelBuilder.Entity("XServicoOnline.Models.UsuarioToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("UsuarioId")
                        .HasMaxLength(100);

                    b.Property<string>("LoginProvider")
                        .HasColumnName("ProvedorLogin")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnName("Nome")
                        .HasMaxLength(100);

                    b.Property<string>("Value")
                        .HasColumnName("TokenValor")
                        .HasMaxLength(200);

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UsuarioToken");
                });

            modelBuilder.Entity("XServicoOnline.Models.FuncaoReivindicacao", b =>
                {
                    b.HasOne("XServicoOnline.Models.Funcao", "Funcao")
                        .WithMany("FuncaoReivindicacao")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("XServicoOnline.Models.UsuarioFuncao", b =>
                {
                    b.HasOne("XServicoOnline.Models.Funcao", "Funcao")
                        .WithMany("UsuarioFuncao")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("XServicoOnline.Models.Usuario", "Usuario")
                        .WithMany("UsuarioFuncao")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("XServicoOnline.Models.UsuarioLogin", b =>
                {
                    b.HasOne("XServicoOnline.Models.Usuario", "Usuario")
                        .WithMany("UsuarioLogin")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("XServicoOnline.Models.UsuarioReivindicacao", b =>
                {
                    b.HasOne("XServicoOnline.Models.Usuario", "Usuario")
                        .WithMany("UsuarioReivindicacao")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("XServicoOnline.Models.UsuarioToken", b =>
                {
                    b.HasOne("XServicoOnline.Models.Usuario", "Usuario")
                        .WithMany("UsuarioToken")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
