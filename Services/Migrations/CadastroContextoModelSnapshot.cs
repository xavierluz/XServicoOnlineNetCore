// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Services.cadastro.contexto;

namespace Services.Migrations
{
    [DbContext(typeof(CadastroContexto))]
    partial class CadastroContextoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Services.modelo.cadastro.Almoxarifado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<Guid>("EmpresaId")
                        .HasMaxLength(100);

                    b.Property<string>("Indentificacao")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("Indentificacao")
                        .IsUnique()
                        .HasName("IDX_ALMOXARIFADO_INDENTIFICACAO");

                    b.ToTable("Almoxarifado");
                });

            modelBuilder.Entity("Services.modelo.cadastro.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Chave")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CnpjCpf")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NomeFantasia")
                        .HasMaxLength(200);

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Site")
                        .HasMaxLength(100);

                    b.Property<string>("Telefone")
                        .HasMaxLength(12);

                    b.Property<string>("WhatsApp")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.HasKey("Id");

                    b.HasIndex("CnpjCpf")
                        .IsUnique()
                        .HasName("INDX_EMPRESA_LOGRADOURO");

                    b.ToTable("Empresa","dbo");
                });

            modelBuilder.Entity("Services.modelo.cadastro.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("QuantidadeAcessoFalho");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("CodigoConcorrencia");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasMaxLength(100);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<Guid>("EmpresaId");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("Bloqueado");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("DataDesbloqueio");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("Nome")
                        .HasMaxLength(50);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("EmailNormalizado")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("NomeNormalizado")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("HashSenha");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("Telefone");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("TelefoneConfirmado");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnName("DataCadastro");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnName("CodigoSeguranca");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("DoisTipoAcesso");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("Usuario")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .HasName("IDX_USUARIO_NOME");

                    b.HasIndex("NormalizedEmail")
                        .HasName("IDX_USUARIO_EMAIL");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("IDX_USUARIO_NOME_NORMALIZADO");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Services.modelo.cadastro.Almoxarifado", b =>
                {
                    b.HasOne("Services.modelo.cadastro.Empresa", "Empresa")
                        .WithMany("Almoxarifados")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
